# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  docs:
    docker:
    - image: circleci/ruby:2.5.1
    steps:
      - checkout
      - run: bundle install
      - run: bundle exec jekyll build
      - deploy:
          name: Deploy Release to GitHub
          command: |
            if [ $CIRCLE_BRANCH == 'gh-pages' ]; then
              bash setup-ghpages.sh
            fi
  build:
    docker:
    # specify the version you desire here
    - image: cimg/node:17.3.0
      environment:
        PG_HOST: 127.0.0.1
        POSTGRES_DB: gitpay_test
        POSTGRES_USER: postgres
        PG_PASSWD: postgres
        NODE_ENV: test
    - image: cimg/postgres:9.6
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: gitpay_test

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: install
          command: 'curl -k -O -L https://npmjs.org/install.sh | sh'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install packages
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
          - node_modules
      #- run: sudo apt install postgresql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      #- run:
      #    name: Set up database
      #    command: psql -h localhost -p 5432 -c 'create database gitpay_test' -U postgres
      - run:
          name: Migrate
          command: npm run migrate-test
      # run tests!
      - run:
          name: run node tests
          command: npm run test
          no_output_timeout: 60m
      - run:
          name: install frontend dependencies
          command: npm install --legacy-peer-deps
          working_directory: frontend
      - run:
          name: run frontend tests
          command: npm run test
          working_directory: frontend

workflows:
  version: 2
  build-all:
    jobs:
      - docs:
          filters:
            branches:
              only: gh-pages
      - build:
          filters:
            branches:
              ignore: gh-pages
